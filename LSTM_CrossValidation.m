function [RMSE] = LSTM_CrossValidation(TrainInput, TrainTarget, ValidationInput, ValidationTarget,...
    numHiddenUnits,connectedLayers, learningRates, dropoutValues, L2Regularization, MinBatchSize)

numFeatures = 5;
numResponses = 1;
 
rng('default')

options = trainingOptions('adam', ...
'MaxEpochs',250, ...
'MiniBatchSize', MinBatchSize, ...
'ValidationData', {ValidationInput, ValidationTarget}, ...
'ValidationFrequency', 25, ...
'ValidationPatience', 10, ...
'GradientThreshold',1, ...
'InitialLearnRate',learningRates, ...
'L2Regularization',L2Regularization, ...
'LearnRateSchedule','piecewise', ...
'Verbose',1, ...
'Shuffle', 'never');

layers = [ ...
sequenceInputLayer(numFeatures)
lstmLayer(numHiddenUnits, 'OutputMode', 'sequence')
fullyConnectedLayer(connectedLayers)
dropoutLayer(dropoutValues)
fullyConnectedLayer(numResponses)
regressionLayer];
%Train network
net = trainNetwork(TrainInput,TrainTarget,layers,options);
%Predict
testPrediction = predict(net, ValidationInput);
%Get RMSE Score
OptimisedRMSE = sqrt(mean((ValidationTarget - testPrediction).^2));
RMSE = mean(OptimisedRMSE);
end

